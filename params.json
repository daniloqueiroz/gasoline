{"name":"Gasoline","tagline":"Minimalist Java 8 Framework for REST APIs","body":"# Gasoline\r\n\r\n[![Build Status](https://travis-ci.org/daniloqueiroz/gasoline.svg?branch=master)](https://travis-ci.org/daniloqueiroz/gasoline)\r\n\r\nGasoline is a very simple Micro Framework for build REST APIs using Java 8.\r\n\r\nOne of the main goals of Gasoline is be as less opinionated as possible\r\nso it comes with no batteries included - no configuration, nor IoC, nor template support \r\nand Log support is build using **java.util.logging**.\r\n\r\nAs it was built with REST API in mind, it only support *JSon* data, using [**GSon**](https://github.com/google/gson) \r\nlibrary.\r\n\r\nOther dependencies includes **Jetty**, as *HTTP/2* server. And that's all!\r\n\r\n# Hello World\r\n\r\n    import static java.lang.String.format;\r\n    \r\n    import gasoline.Application;\r\n    \r\n    public class HelloWorld {\r\n      \r\n      public final String message;\r\n      \r\n      public HelloWorld() {\r\n        this(\"Strange\");\r\n      }\r\n    \r\n      public HelloWorld(String name) {\r\n        this.message = format(\"Hello, %s!\", name);\r\n      }\r\n    \r\n      public static void main(String[] args) {\r\n        Application app = new Application();\r\n    \r\n        app.get(\"/\", (req) -> {\r\n           return new HelloWorld();\r\n        });\r\n        \r\n        app.get(\"/{name}\", (req) -> {\r\n          return new HelloWorld(req.attribute(\"name\"));\r\n       });\r\n    \r\n        app.server().onPort(8080).start();\r\n      }\r\n    }\r\n\r\nSee the *examples* package for more examples.\r\n\r\n# Application and Modules\r\n\r\nThe **Application** is the entry point for a Gasoline Application. You can add your\r\nroutes direct to the application, or you can use **Modules** to split your application\r\non several small components.\r\n\r\n# Routes\r\n\r\nRoutes define a **RequestHandler** to a path. The path should be relative and start with a \"**/**\".\r\n\r\nAlso, you can use dynamic attributes on your path, defining then using curly-braces. The dynamic\r\nattributes can be retrieved later using the method **Request.attribute(String name)**.\r\n\r\n    app.get(\"/{name}\", (req) -> {\r\n      return new HelloWorld(req.attribute(\"name\"));\r\n    });\r\n\r\n# Request Handlers\r\n\r\nA **RequestHandler** is a function that receives a *Request* as parameter and\r\nreturn an *Object* as response.\r\n\r\nIt can return basically anything, a *Response*, generated using **Context** help methods,\r\nor an arbitrary *Object*, that will be rendered as Json using **Context#toJSon** method, or\r\neven a **Future** or a **CompletableFuture** which will be processed asynchronously.\r\n\r\nWe will talk more about *asynchronous handlers* later on.\r\n\r\n# Filters\r\n\r\nFilters can be used to modify **Requests** before the execution of the **RequestHandler**, or even\r\nto verify pre-conditions and interrupt the flow.\r\nFilters are pretty much like a **RequestHandler** but they don't return anything.\r\n\r\n    app.filter(\r\n      (req) -{\r\n        Optional<String> auth = req.header(\"auth\");\r\n        if (!auth.isPresent() || auth.get() != \"secret\") {\r\n          Context.abort(StatusCode.UNAUTHORIZED);\r\n        }\r\n      }, \r\n      app.get(\"/\", (req) -> {\r\n        return new HelloWorld();\r\n      });\r\n    );\r\n\r\n# Request\r\n\r\n# Context\r\n\r\nThe context class provides utilities methods to be used in the context of a **RequestHandler**.\r\nSuch methods can help you transcode *Objects* to *Json* and vice-versa, create custom *Responses*,\r\nwith different *Status Codes*, and much more.\r\n\r\nHere goes a non-exhaustive list of methods provided by the **Context** class.\r\n\r\n* fromJson(String json, Class<?> asClass)\r\n* toJson(Object obj)\r\n* response(StatusCode sc)\r\n* response(StatusCode sc, Object obj)\r\n* ok - alias for *response(StatusCode.OK)*\r\n* created(Object obj) - alias for *response(StatusCode.CREATED, obj)*\r\n* notfound() - alias for *response(StatusCode.NOT_FOUND)*\r\n* badRequest() - alias for *response(StatusCode.BAD_REQUEST)*\r\n\r\nNote that as all the methods are static, you can use static imports.\r\n\r\n# Async\r\n\r\nNot Supported Yet!\r\n\r\n# Server\r\n\r\nNot Supported Yet!\r\n","google":"UA-73823480-1","note":"Don't delete this file! It's used internally to help with page regeneration."}